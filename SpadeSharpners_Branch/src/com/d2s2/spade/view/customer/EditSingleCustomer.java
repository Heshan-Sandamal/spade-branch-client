/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.d2s2.spade.view.customer;

import com.d2s2.spade.controllers.CustomerController;
import com.d2s2.spade.models.Customer;
import com.d2s2.spade.models.CustomerTelephone;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.JXTable;

/**
 *
 * @author tdiluksha
 */
public class EditSingleCustomer extends javax.swing.JDialog {

    private Customer customer;
    private ArrayList<String> telephoneNo;
    private JScrollPane scrollpane;
    private JTable phonenumberTable;
    private DefaultTableModel defaulttablemodel;
    private ArrayList<String> newTelephoneNoList;

    /**
     * Creates new form ViewSingleCustomer
     */
    public EditSingleCustomer(java.awt.Dialog parent, boolean modal, Customer customer) {
        super(parent, modal);
        initComponents();
        this.customer = customer;
        this.IDTextfield.setText(this.customer.getCustomerId());
        this.NameTextField.setText(this.customer.getName());
        this.AddressTextField.setText(this.customer.getAddress());
        IDTextfield.setEditable(false);
        NameTextField.setEditable(true);
        AddressTextField.setEditable(true);
        saveButton.setEnabled(true);
        saveButton.setVisible(true);
        addNewPhonTextbox.setEnabled(true);
        addNewPhonTextbox.setVisible(true);
        addNewPhoneLable.setVisible(true);
        /* creating customer table with specified properties*/
        phonenumberTable = new JTable() /*{
        @Override
        public boolean isCellEditable(int row, int column) {                
                return false;               
        };}*/;
        phonenumberTable.setEnabled(true);

        scrollpane = new JScrollPane();
        scrollpane.setBounds(150, 200, 100, 100);

        try {
            showPhoneNo();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditSingleCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to view due to CLASS " + ex.getMessage());
        } catch (SQLException ex) {
            Logger.getLogger(EditSingleCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to view due to SQL " + ex.getMessage());
        }
    }

    public EditSingleCustomer(java.awt.Frame parent, boolean modal, Customer customer) {

        super(parent, modal);
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        IDTextfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NameTextField = new javax.swing.JTextField();
        AddressTextField = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        addNewPhoneLable = new javax.swing.JLabel();
        addNewPhonTextbox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("CustomerID");

        jLabel2.setText("Name");

        jLabel3.setText("Address");

        NameTextField.setPreferredSize(new java.awt.Dimension(12, 30));

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        addNewPhoneLable.setText("New Phone");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNewPhoneLable)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IDTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNewPhonTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteButton)
                    .addComponent(saveButton))
                .addGap(39, 39, 39))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewPhoneLable)
                    .addComponent(addNewPhonTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(saveButton)
                .addGap(10, 10, 10)
                .addComponent(deleteButton)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddressTextField, IDTextfield, NameTextField, addNewPhonTextbox});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addNewPhoneLable, jLabel1, jLabel2, jLabel3});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            // TODO add your handling code here:
            int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to update??", null,JOptionPane.YES_NO_OPTION);
            if(res == JOptionPane.YES_OPTION) {
                if (NameTextField.getText().isEmpty() || AddressTextField.getText().isEmpty()){
                    JOptionPane.showMessageDialog(this, "Please insert correct values for Name and Address");
                }
                else{
                  saveToDB();  
                }
                
            }
            else if(res == JOptionPane.NO_OPTION) {
                
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditSingleCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to update Customer due to " + ex.getMessage());
        } catch (SQLException ex) {
            Logger.getLogger(EditSingleCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to update Customer due to sql" + ex.getMessage());
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            // TODO add your handling code here:
            int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to DELETE??", null, JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                deleteCustomer();
            } else if (res == JOptionPane.NO_OPTION) {

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditSingleCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to delete due to CLASS deleteButton " + ex.getMessage());
        } catch (SQLException ex) {
            Logger.getLogger(EditSingleCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to delete due to SQL deleteButton " + ex.getMessage());
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditSingleCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditSingleCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditSingleCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditSingleCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressTextField;
    private javax.swing.JTextField IDTextfield;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JTextField addNewPhonTextbox;
    private javax.swing.JLabel addNewPhoneLable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    private void showPhoneNo() throws ClassNotFoundException, SQLException {

        defaulttablemodel = new DefaultTableModel(0, 0);
        String[] tableHeaders = new String[]{"Telephone Numbers"};
        defaulttablemodel.setColumnIdentifiers(tableHeaders);
        phonenumberTable.setModel(defaulttablemodel);

        telephoneNo = CustomerController.viewCustomerPhone("CustomerTelephone", customer.getCustomerId());

        /* customer table data */
        for (int i = 0; i < telephoneNo.size(); i++) {
            Vector<Object> telno = new Vector<Object>();
            telno.add(telephoneNo.get(i));

            defaulttablemodel.addRow(telno);
        }

        /*for (int i=0; i<50; i++){
            Vector<Object> data = new Vector<Object>();
            data.add("000"+i);
            data.add("Customer"+i);
            data.add("Balance"+i);
            defaulttablemodel.addRow(data);
        }*/
        scrollpane.setViewportView(phonenumberTable);
        add(scrollpane);

    }

    private void saveToDB() throws ClassNotFoundException, SQLException {

        newTelephoneNoList = new ArrayList<>();
        String updatedName = NameTextField.getText();
        String updatedAddress = AddressTextField.getText();
        for (int i = 0; i < defaulttablemodel.getRowCount(); i++) {
            if (defaulttablemodel.getValueAt(i, 0).toString() != null) {
                newTelephoneNoList.add(defaulttablemodel.getValueAt(i, 0).toString());
            }
        }
        if (addNewPhonTextbox.getText() != null) {
            newTelephoneNoList.add(addNewPhonTextbox.getText());
        }

        System.out.println(phonenumberTable.getEditingColumn());
        ArrayList<CustomerTelephone> editedCustomerTelephone = new ArrayList<CustomerTelephone>();

        for (int i = 0; i < newTelephoneNoList.size(); i++) {
            //Object object = newTelephoneNoList[i];
            editedCustomerTelephone.add(new CustomerTelephone(IDTextfield.getText(), newTelephoneNoList.get(i)));
        }
        //CustomerTelephone editedCustomerTelephone = new CustomerTelephone(IDTextfield.getText(), newTelephoneNoList);
        Customer newEditedCustomer = new Customer(IDTextfield.getText(), updatedName, updatedAddress, editedCustomerTelephone);

        boolean updated = CustomerController.updateCustomer(customer, newEditedCustomer);

        if (updated) {
            JOptionPane.showMessageDialog(this, "Update " + customer.getCustomerId() + "successfully");
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Unable to update Customer");
        }

    }

    private void deleteCustomer() throws ClassNotFoundException, SQLException {
        boolean dbChanged = false;
        dbChanged = CustomerController.deleteCustomer(customer);

        if (dbChanged == true) {
            JOptionPane.showMessageDialog(this, "Delete " + customer.getCustomerId() + "successfully");
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Unable to delete deleteCustomer");
        }
    }

}
